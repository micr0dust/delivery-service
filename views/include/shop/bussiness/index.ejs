<style>
    html,
    body {
        overflow-y: hidden;
    }
    
    #unaccept {
        height: 90vh;
        overflow-y: scroll;
    }
    
    #accepted {
        height: 90vh;
        overflow-y: scroll;
    }
</style>

<template id="optionTemplate">
    <li name="option"></li>
</template>
<template id="productTemplate">
    <li name="product">
        <h5 name="name"></h5>
        <ul name="options"></ul>
    </li>
</template>
<template id="orderTemplate">
    <div class="card col-12 mt-2" name="order">
        <div class="input-group mb-2 mt-2">
            <div class="input-group-prepend">
                <span class="input-group-text">訂單編號</span>
            </div>
            <input type="text" class="form-control" placeholder="訂單編號" name="_id" disabled>
        </div>
        <div class="input-group mb-2">
            <div class="input-group-prepend">
                <span class="input-group-text">免洗餐具</span>
            </div>
            <input type="text" class="form-control" placeholder="免洗餐具" name="tableware" disabled>
        </div>
        <div class="input-group mb-2">
            <div class="input-group-prepend">
                <span class="input-group-text">總金額</span>
            </div>
            <input type="text" class="form-control" placeholder="總金額" name="total" disabled>
        </div>
        <ul name="product-detail">

        </ul>
    </div>
</template>
<template id="unacceptBtnsTemplate">
    <div name="action" class="row mt-3 mb-3 mr-3 justify-content-end align-items-center">
        <button class="btn btn-danger mr-3" onclick="changeListen(complete,this)">拒絕</button>
        <button class="btn btn-success" onclick="changeListen(accept,this)">接受</button>
    </div>
</template>
<template id="acceptedBtnsTemplate">
    <div name="action" class="row mt-3 mb-3 mr-3 justify-content-end align-items-center">
        <button class="btn btn-warning" onclick="changeListen(complete,this)">標示為完成</button>
    </div>
</template>
<template id="loadingTemplate">
    <span class="spinner-border spinner-border-sm"></span>
</template>

<div id="orderList" class="container-fluid">
    <div id="orderList" class="row mt-5">
        <div class="col-md-6 col-sm-12 p-0" id="unaccept-body">
            <div class="d-flex m-0">
                <div class="p-2 bg-info flex-fill text-white text-center">新訂單</div>
                <div class="p-2 bg-success text-center d-md-none">
                    <a class="text-white" href="javascript:switchPanel('accepted-body')">⮩</a>
                </div>
            </div>
            <div id="unaccept"></div>
        </div>
        <div id="accepted-body" class="col-md-6 col-sm-12 p-0">
            <div class="d-flex m-0">
                <div class="p-2 bg-info text-center d-md-none">
                    <a class="text-white" href="javascript:switchPanel('unaccept-body')">⮨</a>
                </div>
                <div class="p-2 bg-success flex-fill text-white  text-center">已接受的訂單</div>
            </div>
            <div id="accepted"></div>
        </div>
    </div>
</div>

<script src="/js/fetch_request/shop/login.js"></script>
<script src="/js/fetch_request/shop/bussiness/getOrder.js"></script>
<script src="/js/fetch_request/shop/bussiness/token.js"></script>
<script src="/js/fetch_request/shop/bussiness/accept.js"></script>
<script src="/js/fetch_request/shop/bussiness/complete.js"></script>

<script>
    let lastLength = -1;
    orderListGenerate();

    setInterval(function() {
        refresh();
    }, 1000 * 60);

    async function refresh() {
        const nowLength = await orderListGenerate();
        if (nowLength != lastLength && ~lastLength) playAudio();
        lastLength = nowLength;
    }


    function playAudio() {
        const audio = document.createElement("audio");
        audio.src = "/sounds/happyBell.wav";
        audio.play();
    }

    async function changeListen(fun, element) {
        //const wholeCard = element.parentNode.children;
        const allButton = document.getElementsByTagName('button');
        for (let i = 0; i < allButton.length; i++)
            allButton[i].setAttribute("disabled", "disabled");

        const loadingTemplate = document.getElementById('loadingTemplate');
        const loading = document.importNode(loadingTemplate.content, true);
        element.prepend(loading);
        const result = await fun(element.parentNode.parentNode.id);
        if (result.code) lastLength = await orderListGenerate();
    }

    function switchPanel(method) {
        document.getElementById('accepted-body').style.display = 'none';
        document.getElementById('unaccept-body').style.display = 'none';
        document.getElementById(method).style.display = 'block';
    }

    function optionDetail(element, options) {
        const data = JSON.parse(options);
        for (let i = 0; i < data.length; i++) {
            const optionTemplate = document.getElementById('optionTemplate').cloneNode(true);
            const optionTxt = (option) => {
                let result = "";
                if (typeof option == Array)
                    for (let j = 0; j < option.length; j++)
                        result += `${option}${j < option.length - 1 ? "," : ""}`;
                else return option;
                return result;
            }
            optionTemplate.content.querySelector('[name="option"]').innerText = `${data[i]['title']}：${optionTxt(data[i]['option'])}`;
            const newOption = document.importNode(optionTemplate.content, true);
            element.appendChild(newOption);
        }
    }

    function poductDetail(element, order) {
        const data = JSON.parse(order);
        for (let i = 0; i < data.length; i++) {
            const productTemplate = document.getElementById('productTemplate').cloneNode(true);
            optionDetail(productTemplate.content.querySelector('[name="options"]'), data[i]['options']);
            productTemplate.content.querySelector('[name="name"]').innerText = `${data[i]['name']} X${data[i]['count']}`;
            productTemplate.content.querySelector('[name="product"]').id = data[i]['_id'];
            const newProduct = document.importNode(productTemplate.content, true);
            element.appendChild(newProduct);
        }
    }

    async function orderListGenerate() {
        const data = await getOrder();
        const order = data['result'];
        const unaccept = document.getElementById('unaccept');
        const accepted = document.getElementById('accepted');
        const unacceptBtnsTemplate = document.getElementById('unacceptBtnsTemplate');
        const acceptedBtnsTemplate = document.getElementById('acceptedBtnsTemplate');
        unaccept.innerHTML = '';
        accepted.innerHTML = '';

        for (let i = 0; i < order.length; i++) {
            const orderTemplate = document.getElementById('orderTemplate').cloneNode(true);
            const unacceptBtns = document.importNode(unacceptBtnsTemplate.content, true);
            const acceptedBtns = document.importNode(acceptedBtnsTemplate.content, true);

            poductDetail(orderTemplate.content.querySelector('[name="product-detail"]'), order[i]['order']);
            orderTemplate.content.querySelector('[name="_id"]').value = order[i]['_id'];
            orderTemplate.content.querySelector('[name="order"]').id = order[i]['_id'];
            orderTemplate.content.querySelector('[name="tableware"]').value = order[i]['tableware'] ? '是' : '否';
            orderTemplate.content.querySelector('[name="total"]').value = order[i]['total'];
            orderTemplate.content.querySelector('[name="order"]').appendChild(order[i]['accept'] ? acceptedBtns : unacceptBtns);
            const newOrder = document.importNode(orderTemplate.content, true);
            const container = order[i]['accept'] ? accepted : unaccept;
            container.appendChild(newOrder);
        }
        return order.length;
    }
</script>
<script>
</script>