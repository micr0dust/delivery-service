<style>
    .blur {
        filter: grayscale(10%) brightness(50%) blur(2px);
    }
    
    .overlay-text {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.5rem;
    }
</style>
<div class="container">
    <div class="row">
        <div class="card col-md-6 col-sm-12 mt-5">
            <img class="card-img-top" id="img" src="/images/background.jpg" alt="Card image" style="width:100%">
            <div class="card-body justify-content-between">
                <h4 id="name" class="card-title d-inline-block"></h4>
                <button id="edit" class="btn btn-warning float-right" onclick="location.href='/shop/bussiness'">開始營業</button>
            </div>
        </div>
        <div class="card col-md-6 col-sm-12">
            <div class="card-body">
                <h4 class="mb-3 mt-5 d-none d-md-block">商家主控台</h4>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">地址</span>
                    </div>
                    <input type="text" id="address" class="form-control" placeholder="地址" name="address" disabled>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">供餐位置</span>
                    </div>
                    <select class="form-control" id="place" disabled>
                        <option class="d-none">未設定</option>
                        <option value="校門口">校門口</option>
                        <option value="力行宿舍">力行宿舍</option>
                        <option value="恩慈良善宿舍">恩慈良善宿舍</option>
                    </select>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">預估備餐時間</span>
                    </div>
                    <input type="number" id="timeEstimate" class="form-control" placeholder="預估備餐時間" name="timeEstimate" disabled>
                    <div class="input-group-append">
                        <span class="input-group-text">分鐘</span>
                    </div>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">創建時間</span>
                    </div>
                    <input type="text" id="create" class="form-control" placeholder="創建時間" name="create" data-cantChange disabled>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">上次更新</span>
                    </div>
                    <input type="text" id="update" class="form-control" placeholder="上次更新" name="update" data-cantChange disabled>
                </div>
                <button id="edit" class="btn btn-primary mt-1" onclick="edit(true)">編輯</button>
                <button id="unedit" class="btn btn-danger mt-1 d-none" onclick="edit(false)">取消</button>
                <button id="submit" class="btn btn-success ml-3 mt-1 d-none" onclick="submitUpdate()">儲存</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="card col-12 mt-3 ">
            <div id="schedule" class="card-body col-sm-12">
                <h3>營業時間</h3>
            </div>
        </div>
    </div>
    <div id="options" class="row mt-3 justify-content-start align-items-center">
        <button class="btn btn-primary mt-3 md-5" onclick="addProductForm()">新增商品</button>
    </div>
    <div id="product" class="row mt-3 justify-content-start align-items-center"></div>
    <div class="row">
        <template id="productTemplate">
            <div class="card col-sm-6 col-md-3 mt-3 mr-3">
                <a class="text-decoration-none" onclick="productClick(this.parentNode);return false;">
                    <img class="img-fluid" src="/images/background.jpg">
                    <div class="card-footer justify-content-between">
                        <span>name</span>
                        <span>price</span>
                    </div>
                </a>
                <div class="overlay-text text-light"></div>
            </div>
        </template>
        <template id="date-Line">
            <div class="d-flex justify-content-around" name="line">
                <div class="col-2 text-center user-select-none" name="time">/</div>
            </div>
        </template>
        <template id="date-block">
            <div class="form-check flex-fill">
                <input class="form-check-input" type="checkbox" name="dateCheck" disabled>
                <label class="form-check-label"></label>
            </div>
        </template>
        <template id="productCardTemplate">
            <div class="card-body">
                <div class="input-group mb-2">
                    <!-- <h4 name="title" class="ml-auto"></h4> -->
                    <div class="input-group-prepend">
                        <span class="input-group-text">名稱</span>
                    </div>
                    <input type="text" name="title" class="form-control" disabled>
                    <button class="btn ml-auto" tabindex="-1" onclick="swal.close()">X</button>
                </div>
                
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">敘述</span>
                    </div>
                    <input type="text" name="describe" class="form-control" disabled>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">價錢</span>
                    </div>
                    <input type="text" name="price" class="form-control" disabled>
                </div>
                <div class="input-group mb-2">
                    <div class="input-group-prepend">
                        <span class="input-group-text">標籤</span>
                    </div>
                    <input type="text" name="type" class="form-control" disabled>
                </div>
                    
                <div name="options"></div>

                <div name="btns" class="input-group d-flex mb-2">
                    <button name="del" class="btn btn-danger mt-1">刪除</button>
                    <div class="ml-auto">
                        <button name="unpause" class="btn btn-success mt-1 d-none">重新上架</button>
                        <button name="pause" class="btn btn-secondary mt-1 d-none" >暫時下架</button>
                        <button name="update" class="btn btn-primary mt-1">編輯</button>
                    </div>
                </div>
            </div>
        </template>
        <template id="productOptionsTemplate">
            <div class="input-group mb-2">
                <div class="input-group-prepend">
                    <span name="title" class="input-group-text"></span>
                </div>
                <select class="form-control">
                    <option name="multiple" class="d-none"></option>
                </select>
            </div>
        </template>
        <template id="optionTemplate">
            <option name="option"></option>
        </template>
    </div>
</div>
<script src="/js/fetch_request/shop/profile.js"></script>
<script src="/js/fetch_request/storePage.js"></script>
<script src="/js/fetch_request/shop/deleteProduct.js"></script>
<script src="/js/fetch_request/shop/pauseProduct.js"></script>
<script src="/js/fetch_request/shop/addProduct.js"></script>
<script src="/js/fetch_request/shop/update.js"></script>

<script>
    function edit(able) {
        const edit = document.getElementById('edit');
        const unedit = document.getElementById('unedit');
        const submit = document.getElementById('submit');
        if (able) {
            edit.classList.add('d-none');
            unedit.classList.remove('d-none');
            submit.classList.remove('d-none');
        } else {
            unedit.classList.add('d-none');
            submit.classList.add('d-none');
            edit.classList.remove('d-none');
        }
        const input = document.getElementsByTagName('input');
        const select = document.getElementsByTagName('select');
        for (let i = 0; i < input.length; i++)
            input[i].disabled = able && !input[i].hasAttribute("data-cantChange") ? false : true;
        for (let i = 0; i < select.length; i++)
            select[i].disabled = able && !select[i].hasAttribute("data-cantChange") ? false : true;
    }

    function createFormTitle() {
        const line = document.getElementById('date-Line').cloneNode(true);
        const week = ['日', '一', '二', '三', '四', '五', '六'];
        for (let day = 0; day < 7; day++) {
            const block = document.getElementById('date-block').cloneNode(true);
            block.content.querySelector('div > label').innerText = "星期" + week[day];
            block.content.querySelector('div > input').remove();
            const newBlock = document.importNode(block.content, true);
            line.content.querySelector('div').appendChild(newBlock);
        }
        const newLine = document.importNode(line.content, true);
        document.getElementById('schedule').appendChild(newLine);
    }

    function bindEventToForm() {
        const schedule = document.getElementById('schedule');
        const checkboxs = schedule.querySelectorAll('[name="dateCheck"]');
        for (let i = 0; i < checkboxs.length; i++) {
            checkboxs[i].addEventListener('change', (event) => {
                if (event.currentTarget.checked)
                    event.currentTarget.parentNode.classList.add('bg-warning');
                else
                    event.currentTarget.parentNode.classList.remove('bg-warning');
            });
        }
    }

    function checksColorAlt(checked) {
        if (checked)
            event.currentTarget.parentNode.classList.add('bg-warning');
        else
            event.currentTarget.parentNode.classList.remove('bg-warning');
    }

    function createDateGrid() {
        createFormTitle();
        for (let hour = 0; hour < 24; hour++) {
            const line = document.getElementById('date-Line').cloneNode(true);
            const str = `${hour.toString().padStart(2, '0')}:00 ~ ${hour+1>=24?'00':(hour+1).toString().padStart(2, '0')}:00`;
            line.content.querySelector('[name="time"]').innerText = str;
            if (hour % 2) {
                line.content.querySelector('div').classList.add('bg-light');
                line.content.querySelector('div').classList.add('text-secondary');
            }
            for (let day = 0; day < 7; day++) {
                const block = document.getElementById('date-block').cloneNode(true);
                //block.content.querySelector('div > label').innerText = hour * 100 + day;
                const newBlock = document.importNode(block.content, true);
                line.content.querySelector('div').appendChild(newBlock);
            }
            const newLine = document.importNode(line.content, true);
            document.getElementById('schedule').appendChild(newLine);
        }
        bindEventToForm();
    }
    createDateGrid();

    function submitUpdate() {
        document.getElementById('loader').classList.add('is-active');
        const address = document.getElementById('address');
        const place = document.getElementById('place');
        const timeEstimate = document.getElementById('timeEstimate');

        const schedule = document.getElementById('schedule');
        const line = schedule.querySelectorAll('[name="line"]');
        let businessTime = [];
        for (let i = 1; i < line.length; i++) {
            let hour = [];
            const time = line[i].querySelectorAll('[name="dateCheck"]');
            for (let j = 0; j < time.length; j++)
                hour.push(time[j].checked);
            businessTime.push(hour);
        }

        const data = {
            address: address.value,
            place: place.value,
            timeEstimate: timeEstimate.value,
            businessTime: JSON.stringify(businessTime)
        };

        putStore(data);
    }

    const getData = (id) => {
        return document.getElementById(id).dataset;
    };
    const deleteProduct = (data) => {
        Swal.fire({
            title: '刪除商品',
            html: `在下方輸入 <span class="font-weight-bold text-danger">${data.name}</span> 以確認刪除`,
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonColor: '#bf0d0d',
            cancelButtonColor: '#808080',
            confirmButtonText: '刪除',
            showLoaderOnConfirm: true,
            preConfirm: (confirm) => {
                if (confirm == data.name) return delProduct(data.id);
                else Swal.showValidationMessage(
                    '輸入錯誤'
                );
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed) {
                getProductFn();
                Swal.fire(
                    '刪除成功',
                    `${data.name} 已經被刪除`,
                    'success'
                );
            }
        });
    };
    const pauseProduct = (data) => {
        const pause = (data.pause === "true");
        const actionStr = pause ? "重新上架" : "暫時下架";
        Swal.fire({
            title: `${actionStr}商品`,
            html: `在下方輸入 <span class="font-weight-bold text-${pause?'success':'secondary'}">${data.name}</span> 以確認${actionStr}`,
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonColor: pause ? '#198754' : '#000',
            cancelButtonColor: '#808080',
            confirmButtonText: actionStr,
            showLoaderOnConfirm: true,
            preConfirm: (confirm) => {
                if (confirm == data.name) return putPauseProduct(data.id);
                else Swal.showValidationMessage(
                    '輸入錯誤'
                );
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed) {
                getProductFn();
                Swal.fire(
                    `${actionStr}成功`,
                    `${data.name} 已經${actionStr}`,
                    'success'
                );
            }
        });
    };

    function productClick(element) {
        const data = element.dataset;
        const popupTemplate = document.getElementById('productCardTemplate').cloneNode(true);
        popupTemplate.content.querySelector('[name="title"]').value = data.name === "null" ? "" : data.name;
        popupTemplate.content.querySelector('[name="describe"]').value = data.describe === "null" ? "" : data.describe;
        popupTemplate.content.querySelector('[name="price"]').value = data.price === "null" ? "" : data.price;
        popupTemplate.content.querySelector('[name="type"]').value = data.type === "null" ? "" : data.type;
        popupTemplate.content.querySelector('[name="del"]').setAttribute("onClick", `deleteProduct(getData("${data.id}"))`);
        popupTemplate.content.querySelector('[name="pause"]').setAttribute("onClick", `pauseProduct(getData("${data.id}"))`);
        popupTemplate.content.querySelector('[name="unpause"]').setAttribute("onClick", `pauseProduct(getData("${data.id}"))`);
        popupTemplate.content.querySelector('[name="update"]').setAttribute("onClick", `location.href="/shop/update?${data.id}"`);

        if (data.pause === "true") popupTemplate.content.querySelector('[name="unpause"]').classList.remove('d-none');
        else popupTemplate.content.querySelector('[name="pause"]').classList.remove('d-none');

        if (data.options != "null") {
            const newTitle = document.createElement("h4");
            newTitle.textContent = "選項";
            const optionDiv = popupTemplate.content.querySelector('[name="options"]');
            popupTemplate.content.querySelector('div').insertBefore(newTitle, optionDiv);
            const options = JSON.parse(data.options);
            for (let i = 0; i < options.length; i++) {
                const newProductOptions = document.getElementById('productOptionsTemplate').cloneNode(true);
                newProductOptions.content.querySelector('[name="title"]').textContent = options[i].title;
                newProductOptions.content.querySelector('[name="multiple"]').textContent = options[i].multiple ? `多選` : `單選`;
                const option = options[i]['option'];
                for (let j = 0; j < option.length; j++) {
                    const newProductOption = document.getElementById('optionTemplate').cloneNode(true);
                    newProductOption.content.querySelector('[name="option"]').textContent = `${option[j].name} ${parseInt(option[j].cost)?("NT$ "+option[j].cost):""}`;
                    const ProductOption = document.importNode(newProductOption.content, true);
                    newProductOptions.content.querySelector('div > select').appendChild(ProductOption);
                }
                const productOptions = document.importNode(newProductOptions.content, true);
                popupTemplate.content.querySelector('div').insertBefore(productOptions, optionDiv);
            }
        }
        const card = document.importNode(popupTemplate.content, true);

        Swal.fire({
            html: card.querySelector('div'),
            showConfirmButton: false
        });
    }

    async function getProductFn(url) {
        if (url) localStorage.setItem('url', url);

        const result = await getStoreProduct();
        const data = JSON.parse(result);
        let products = document.getElementById('product');
        while (products.hasChildNodes())
            products.removeChild(products.lastChild);
        let productList = document.getElementById('product');
        for (let i = 0; i < data.result.length; i++) {
            const product = data.result[i];
            const newProduct = document.getElementById('productTemplate').cloneNode(true);
            if (product.pause) {
                newProduct.content.querySelector('div > a > img').classList.add('blur');
                newProduct.content.querySelector('div > .overlay-text').textContent = "暫時下架";
            }
            for (const key in product)
                newProduct.content.querySelector('div').dataset[key] = product[key];
            newProduct.content.querySelector('div > a > .card-footer > span:nth-child(1)').textContent = product.name;
            newProduct.content.querySelector('div').id = product.id;
            newProduct.content.querySelector('div > a > .card-footer > span:nth-child(2)').textContent = "NT$" + product.price;
            newProduct.content.querySelector('div > a').href = `#${product.id}`;
            const card = document.importNode(newProduct.content, true);
            productList.appendChild(card);
        }
    }

    async function getInfoFn() {
        let urlparm = window.location.href;
        if (window.location.href.split('?')[1]) {
            urlparm = window.location.href.split('?')[1];
            if (urlparm.split('&')[0].split('=')[0] == "refresh_token")
                if (urlparm.split('&')[0].split('=')[1] != "")
                    localStorage.setItem('refresh_token', urlparm.split('&')[0].split('=')[1]);
        }

        const result = await getStore();
        const data = JSON.parse(result);
        if (data.result.name) document.getElementById('name').innerText = data.result.name;
        if (data.result.address) document.getElementById('address').value = data.result.address;
        if (data.result.place) document.getElementById('place').value = data.result.place;
        if (data.result.timeEstimate) document.getElementById('timeEstimate').value = data.result.timeEstimate;
        if (data.result.businessTime) {
            const schedule = document.getElementById('schedule');
            const line = schedule.querySelectorAll('[name="line"]');
            const businessTime = data.result.businessTime;
            for (let i = 1; i < line.length; i++) {
                const time = line[i].querySelectorAll('[name="dateCheck"]');
                for (let j = 0; j < time.length; j++) {
                    time[j].checked = Boolean(businessTime[i - 1][j]);
                    time[j].checked ?
                        time[j].parentNode.classList.add('bg-warning') :
                        time[j].parentNode.classList.remove('bg-warning');
                }
            }
        }
        if (data.result.create_date) document.getElementById('create').value = new Date(data.result.create_date).toLocaleString();
        if (data.result.last_login) document.getElementById('update').value = new Date(data.result.last_login).toLocaleString();
        if (data.result.url) await getProductFn(data.result.url);

    }
    getInfoFn();

    function addProductForm() {
        Swal.fire({
            title: '新增商品',
            html: `<input type="text" id="product" class="swal2-input" placeholder="商品名稱" autocomplete="off">
        <input type="text" id="describe" class="swal2-input" placeholder="敘述"autocomplete="off">
        <input type="text" id="tag" class="swal2-input" placeholder="標籤" autocomplete="off">
        <input type="number" id="price" class="swal2-input" min="1" max="9999" placeholder="商品價格" autocomplete="off">
        <div id="options"></div>`,
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            showDenyButton: true,
            denyButtonText: '進階選項',
            denyButtonColor: '#00AAAA',
            cancelButtonColor: '#808080',
            confirmButtonText: '建立',
            showLoaderOnConfirm: true,
            preConfirm: () => {
                const name = Swal.getPopup().querySelector('#product').value;
                const describe = Swal.getPopup().querySelector('#describe').value;
                const tag = Swal.getPopup().querySelector('#tag').value;
                const price = Swal.getPopup().querySelector('#price').value;
                const oProduct = {
                    name: name,
                    describe: describe,
                    tag: tag,
                    price: price
                };
                if (name && price) return addProduct(oProduct);
                else Swal.showValidationMessage(
                    '商品名稱和價格為必填選項'
                );
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed) {
                getProductFn();
                Swal.fire(
                    '建立成功',
                    '',
                    'success'
                );
            } else if (result.isDenied) {
                const product = Swal.getPopup().querySelector('#product').value;
                const describe = Swal.getPopup().querySelector('#describe').value;
                const tag = Swal.getPopup().querySelector('#tag').value;
                const price = Swal.getPopup().querySelector('#price').value;
                location.href = `/shop/add?product=${product}&describe=${describe}&tag=${tag}&price=${price}`;
            }
        })
    }
</script>