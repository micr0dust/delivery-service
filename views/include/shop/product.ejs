<style>
    .blur {
        filter: grayscale(10%) brightness(50%) blur(2px);
    }
    
    .overlay-text {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 1.5rem;
    }
</style>
<div class="container">
    <div class="row">
        <div class="card col-md-6 col-sm-12 mt-5">
            <input class="form-control-file d-none" accept="image/png,.jpg,.jepg" type='file' id="imgInp" onchange="changeThumbnail(this.files)" />
            <div id="drop-area">
                <img class="card-img-top" id="thumbnail" src="/images/background.jpg" alt="Card image" style="width:100%">
                <div class="overlay-text text-light">拖曳至此上傳圖片</div>
            </div>
        </div>
        <div class="card col-md-6 col-sm-12">
            <div class="card-body">
                <form class="form-signin" autocomplete="off">
                    <h4 class="mb-5 mt-5 d-none d-md-block">新增商品</h4>
                    <div class="input-group mb-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">商品名稱</span>
                        </div>
                        <input type="text" id="product" class="form-control" placeholder="商品名稱" name="product">
                    </div>
                    <div class="input-group mb-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">敘述</span>
                        </div>
                        <input type="text" id="describe" class="form-control" placeholder="敘述" name="describe">
                    </div>
                    <div class="input-group mb-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">標籤</span>
                        </div>
                        <input type="text" id="tag" class="form-control" placeholder="標籤" name="tag">
                    </div>
                    <div class="input-group mb-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">價格</span>
                        </div>
                        <input type="number" id="price" class="form-control" placeholder="價格" name="price">
                    </div>
                </form>
                <button id="submit" class="btn btn-primary" onclick="submitProduct()">建立</button>
                <button class="btn btn-secondary" onclick="cancel()">取消</button>
            </div>
        </div>
    </div>
    <div class="row">
        <template id="optionTemplate">
        <div class="card col-12 mt-3" name="option">
            <div class="input-group mb-2 mt-3">
                <div class="input-group-prepend">
                    <span class="input-group-text">項目</span>
                </div>
                <input type="text" class="form-control" placeholder="項目" name="title" autocomplete="off">
                <button class="btn ml-3" onclick="this.parentNode.parentNode.remove()">X</button>
            </div>
            <div class="input-group mb-2">
                <div class="input-group-prepend">
                    <span class="input-group-text">選項</span>
                </div>
                <select class="form-control" name="multiple" onchange="multipleOnChange(this)">
                                <option value="false">單選</option>
                                <option value="true">複選</option>
                            </select>
            </div>
            <div class="input-group mb-2">
                <div class="input-group-prepend">
                    <span class="input-group-text">必須填寫</span>
                </div>
                <select class="form-control" name="required">
                                <option value="true">是</option>
                                <option value="false">否</option>
                            </select>
            </div>
            <div class="input-group mb-2 d-none" name="limit">
                <div class="input-group-prepend">
                    <span class="input-group-text">限制 (非必填)</span>
                </div>
                <input type="number" class="form-control" placeholder="最少選幾項" name="min" autocomplete="off">
                <input type="number" class="form-control" placeholder="最多選幾項" name="max" autocomplete="off">
            </div>
            <ul name="child-options">
                <li><p>子選項</p></li>
                <button name="child-options-add" class="btn btn-primary ml-3 mt-1" onclick="addChildOption(this)">+</button>
            </ul>
        </div>
        </template>
        <template id="childOptionTemplate">
            <li class="input-group mb-2 col-md-8 col-sm-12 mt-1" name="child-option">
                <div class="input-group-prepend">
                    <span class="input-group-text">名稱</span>
                </div>
                <input type="text" class="form-control" placeholder="選項名" name="child-title" autocomplete="off">
                <div class="input-group-prepend ml-3">
                    <span class="input-group-text">加錢</span>
                </div>
                <input type="number" class="form-control" placeholder="須額外花費金額" name="child-cost" value="0" autocomplete="off">
                <button class="btn ml-3" name="child-options-remove" onclick="this.parentNode.remove()">X</button>
            </li>
        </template>
    </div>
    <div id="options" class="row mt-3 justify-content-start align-items-center">
        <button class="btn btn-primary mt-3 md-5" onclick="addOption(this)">新增選項</button>
    </div>
</div>
<script src="/js/fetch_request/storePage.js"></script>
<script>
    const listenerFns = {
        addblur: (e) => {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('thumbnail').classList.add('blur');
        },
        rmblur: (e) => {
            e.preventDefault();
            e.stopPropagation();
            document.getElementById('thumbnail').classList.remove('blur');
        }
    };

    function dropTrigger(e) {
        let dt = e.dataTransfer;
        let files = dt.files;

        changeThumbnail(files);
    }

    function changeThumbnail(files) {
        document.getElementById('imgInp').files = files;
        const [file] = files;
        if (file) {
            document.getElementById('thumbnail').src = URL.createObjectURL(file);
        }
    }

    const dropArea = document.getElementById('drop-area');
    dropArea.addEventListener('drop', dropTrigger, false);
    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, listenerFns.addblur, false);
    });
    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, listenerFns.rmblur, false);
    });

    function cancel() {
        Swal.fire({
            title: '確定要取消？',
            text: "取消後將不會保存你編輯的內容",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#adb5bd',
            confirmButtonText: '是',
            cancelButtonText: '否'
        }).then((result) => {
            if (result.isConfirmed) location.href = '/shop';
        })
    }

    function multipleOnChange(element) {
        if (element.value === "true")
            element.parentNode.parentNode.querySelector('[name="limit"]').classList.remove('d-none');
        else
            element.parentNode.parentNode.querySelector('[name="limit"]').classList.add('d-none');
    }

    function addChildOption(element, data) {
        const childOptionTemplate = document.getElementById('childOptionTemplate').cloneNode(true);
        if (data) {
            childOptionTemplate.content.querySelector('[name="child-title"]').value = data.name;
            childOptionTemplate.content.querySelector('[name="child-cost"]').value = data.cost;
        }
        const newChildOption = document.importNode(childOptionTemplate.content, true);
        element.parentNode.insertBefore(newChildOption, element);
    }

    function addOption(element) {
        const optionTemplate = document.getElementById('optionTemplate').cloneNode(true);
        addChildOption(optionTemplate.content.querySelector('[name="child-options-add"]'));
        optionTemplate.content.querySelector('[name="child-options-remove"]').style.visibility = 'hidden';
        const newOption = document.importNode(optionTemplate.content, true);
        element.parentNode.insertBefore(newOption, element);
    }

    function getForm(addition) {
        const name = document.getElementById('product');
        const describe = document.getElementById('describe');
        const tag = document.getElementById('tag');
        const price = document.getElementById('price');

        const options = document.getElementById('options');
        const arrOptions = options.querySelectorAll('[name="option"]');

        let optionData = [];
        for (let i = 0; i < arrOptions.length; i++) {
            const title = arrOptions[i].querySelector('[name="title"]');
            const multiple = arrOptions[i].querySelector('[name="multiple"]');
            const required = arrOptions[i].querySelector('[name="required"]');
            const childOptions = arrOptions[i].querySelector('[name="child-options"]');
            const arrChildOptions = childOptions.querySelectorAll('[name="child-option"]');
            const min = arrOptions[i].querySelector('[name="min"]').value || null;
            const max = arrOptions[i].querySelector('[name="max"]').value || null;
            let childOptionsData = [];
            for (let j = 0; j < arrChildOptions.length; j++) {
                const childTitle = arrChildOptions[j].querySelector('[name="child-title"]');
                const childCost = arrChildOptions[j].querySelector('[name="child-cost"]');
                childOptionsData.push({
                    name: childTitle.value,
                    cost: childCost.value
                });
            }
            optionData.push({
                title: title.value,
                multiple: multiple.value === "true",
                requires: required.value === "true",
                min: multiple.value === "true" ? min : null,
                max: multiple.value === "true" ? max : null,
                option: childOptionsData
            });
        }

        const oProduct = {
            name: name.value,
            describe: describe.value,
            tag: tag.value,
            price: price.value,
            options: JSON.stringify(optionData),
        };
        for (const key in addition)
            oProduct[key] = addition[key];

        return oProduct;
    }
</script>